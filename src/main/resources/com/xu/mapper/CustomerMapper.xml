<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xu.mapper.CustomerMapper">

    <sql id="customerByCriteria">
        <where>
            <if test="custName != null and custName !=''">
                and c.cust_name like'%${custName}%'
            </if>
            <if test="custSource != null and custSource !=''">
                and c.cust_source =#{custSource}
            </if>
            <if test="custIndustry != null and custIndustry !=''">
                and c.cust_industry=#{custIndustry}
            </if>
            <if test="custLevel != null and custLevel !=''">
                and c.cust_level =#{custLevel}
            </if>
        </where>
    </sql>

    <select id="findCustomerByCriteriaByPage" parameterType="queryVo" resultType="customer">
        select c.cust_id,c.cust_name,b1.dict_item_name cust_source,b2.dict_item_name cust_industry,b3.dict_item_name
        cust_level,c.cust_phone,c.cust_mobile
        from customer c
        left join base_dict b1 on c.cust_source = b1.dict_id
        left join base_dict b2 on c.cust_industry = b2.dict_id
        left join base_dict b3 on c.cust_level = b3.dict_id
        <include refid="customerByCriteria"/>
        order by c.cust_id
    </select>

   <!-- <select id="findCountByCriteriaByPage" parameterType="queryVo" resultType="int">
        select count(*) from customer c
        left join base_dict b1 on c.cust_source = b1.dict_id
        left join base_dict b2 on c.cust_industry = b2.dict_id
        left join base_dict b3 on c.cust_level = b3.dict_id
        <include refid="customerByCriteria"/>
    </select>-->

    <delete id="removeCustomerById" parameterType="string">
        delete from customer where cust_id = #{id};
    </delete>

    <!--<select id="findCustomerById" parameterType="string" resultType="customer">
        select c.cust_id,c.cust_name,c.cust_source,c.cust_industry,
        c.cust_level,c.cust_phone,c.cust_mobile,c.cust_linkman,c.cust_zipcode,c.cust_address
        from customer c
        left join base_dict b1 on c.cust_source = b1.dict_id
        left join base_dict b2 on c.cust_industry = b2.dict_id
        left join base_dict b3 on c.cust_level = b3.dict_id
        where cust_id = #{id};
    </select>-->

    <select id="findCustomerById" parameterType="string" resultType="customer">
        select * from customer where cust_id = #{id};
    </select>

    <update id="updateCustomer" parameterType="customer">
        update customer set cust_name=#{cust_name},cust_source=#{cust_source},
        cust_industry=#{cust_industry},cust_level=#{cust_level},cust_linkman=#{cust_linkman},
        cust_phone=#{cust_phone},cust_mobile=#{cust_mobile},cust_zipcode=#{cust_zipcode},
        cust_address=#{cust_address} where cust_id=#{cust_id}
    </update>

    <insert id="addCustomer" parameterType="customer">
        insert into customer (cust_name,cust_source,cust_industry,cust_level,cust_linkman,cust_phone,
        cust_mobile,cust_zipcode,cust_address,cust_createtime)values (#{cust_name},#{cust_source},#{cust_industry},
        #{cust_level},#{cust_linkman},#{cust_phone},#{cust_mobile},#{cust_zipcode},#{cust_address},#{cust_createtime});
    </insert>
</mapper>